import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Generate a synthetic dataset
np.random.seed(0)

# Generate synthetic features
n_samples = 200
temperature = np.random.uniform(15, 30, n_samples)  # Temperature between 15 and 30
humidity = np.random.uniform(30, 80, n_samples)      # Humidity between 30% and 80%
occupancy = np.random.randint(0, 2, n_samples)       # Occupancy (0 or 1)

# Simulated energy consumption (Target variable)
energy_consumption = (5 * temperature) + (2 * humidity) + (3 * occupancy) + np.random.normal(0, 5, n_samples)

# Create a DataFrame
data = pd.DataFrame({
    'Temperature': temperature,
    'Humidity': humidity,
    'Occupancy': occupancy,
    'EnergyConsumption': energy_consumption
})

# Step 2: Prepare the data for training
X = data[['Temperature', 'Humidity', 'Occupancy']]  # Features
y = data['EnergyConsumption']                        # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Create and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Make predictions
y_pred = model.predict(X_test)

# Step 5: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R2 Score: {r2:.2f}")

# Step 6: Visualize Actual vs Predicted energy consumption
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Energy Consumption")
plt.ylabel("Predicted Energy Consumption")
plt.title("Actual vs Predicted Energy Consumption")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
plt.show()
